/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/* Enhanced UDP Sink with Storing Mode Support */
#include "uip.h"

#include "net/rpl/rpl.h"
#include "contiki.h"
#include "contiki-lib.h"
#include "contiki-net.h"
#include "net/ip/uip.h"
#include "net/rpl/rpl.h"
#include "net/linkaddr.h"
#include "net/netstack.h"
#include "net/ipv6/uip-ds6.h"
#include "net/ipv6/uip-ds6-route.h"
#include "dev/button-sensor.h"
#include "dev/serial-line.h"
#if CONTIKI_TARGET_Sky
#include "dev/uart0.h"
#else
#include "dev/uart1.h"
#endif
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "collect-common.h"
#include "collect-view.h"

#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"


#define UIP_IP_BUF   ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
#define UDP_CLIENT_PORT 8775
#define UDP_SERVER_PORT 5688

#include "dev/watchdog.h"

static struct uip_udp_conn *server_conn;
static uint32_t total_packets_received = 0;
static uint32_t network_time = 0;

#if CONTIKI_TARGET_SKY
#include "dev/uart1.h"  // Include UART1 header for Sky
#else
#include "dev/uart0.h"
#endif


PROCESS(udp_server_process, "UDP server process");
AUTOSTART_PROCESSES(&udp_server_process,&collect_common_process, &tcpip_process);
/*---------------------------------------------------------------------------*/

void rpl_reset_dio_timer(rpl_instance_t *instance);
/*---------------------------------------------------------------------------*/
void
collect_common_set_sink(void)
{
}
/*---------------------------------------------------------------------------*/
void
collect_common_net_print(void)
{
  uip_ds6_route_t *r;
  uip_ds6_defrt_t *defrt;
  uip_ds6_nbr_t *nbr;
  int route_count = 0;
  rpl_dag_t *dag;
  
  printf("Sink Stats: Packets=%lu, Time=%lus\n", 
        total_packets_received,
        network_time / CLOCK_SECOND);
  
  printf("DAG Verification:\n");
  dag = rpl_get_any_dag();
if(dag != NULL) {
  printf("  DAG ID: ");
  PRINT6ADDR(&dag->dag_id);
  printf("\n  Version: %u\n  Rank: %u\n", dag->version, dag->rank);
}

  /* Display routes maintained in storing mode */
  printf("Stored Routes:\n");
  defrt = uip_ds6_defrt_head();
  while(defrt != NULL) {
    printf("  Default via ");
    PRINT6ADDR(&defrt->ipaddr);
    printf("\n");
    route_count++;
    defrt = list_item_next(defrt);
  }
  
  for(r = uip_ds6_route_head(); r != NULL; r = uip_ds6_route_next(r)) {
    printf("  ");
    PRINT6ADDR(&r->ipaddr);
    printf("/%u via ", r->length);
    if(uip_ds6_route_nexthop(r) != NULL) {
      PRINT6ADDR(uip_ds6_route_nexthop(r));
    } else {
      printf("(direct)");
    }
    printf("\n");
    route_count++;
  }
  
  printf("Neighbors:\n");
  for(nbr = nbr_table_head(ds6_neighbors); 
      nbr != NULL; 
      nbr = nbr_table_next(ds6_neighbors, nbr)) {
    printf("  ");
    PRINT6ADDR(&nbr->ipaddr);
    printf(" (reachable: %u)\n", 
           (nbr_table_get_lladdr(ds6_neighbors, nbr) != NULL));
  }
  
  printf("Total routes: %d\n", route_count);
}
/*---------------------------------------------------------------------------*/
void
collect_common_send(void)
{
  /* Server never sends */
}
/*---------------------------------------------------------------------------*/
void
collect_common_net_init(void)
{
#if CONTIKI_TARGET_SKY
  uart1_set_input(serial_line_input_byte);
#else
  uart0_set_input(serial_line_input_byte);
#endif
  PRINTF("Sink initialized with storing mode\n");
}
/*---------------------------------------------------------------------------*/
#ifndef UIP_IP_BUF
#define UIP_IP_BUF ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
#endif
#ifndef UIP_LLH_LEN
#define UIP_LLH_LEN 14   // For 802.15.4 (adjust if using different link layer)
#endif

static void
tcpip_handler(void)
{
  uint8_t *appdata;
  linkaddr_t sender;
  uint8_t seqno;
  uint8_t hops;

  if(uip_newdata()) {
    appdata = (uint8_t *)uip_appdata;
    
    /* Extract node ID from IPv6 address (bytes 14-15) */
    uint16_t node_id = (UIP_IP_BUF->srcipaddr.u8[14] << 8) | 
                       UIP_IP_BUF->srcipaddr.u8[15];
    
    /* Convert to linkaddr_t format */
    sender.u8[0] = node_id & 0xFF;
    sender.u8[1] = (node_id >> 8) & 0xFF;
    
    seqno = *appdata;
    hops = uip_ds6_if.cur_hop_limit - UIP_IP_BUF->ttl + 1;
    
    total_packets_received++;
    network_time = clock_time();

    PRINTF("Received from node %04x: seq=%u, hops=%u\n", node_id, seqno, hops);
    
    collect_common_recv(&sender, seqno, hops, appdata + 2, uip_datalen() - 2);
  }
}
/*---------------------------------------------------------------------------*/
static void
print_local_addresses(void)
{
  int i;
  uint8_t state;

  PRINTF("Server IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(state == ADDR_TENTATIVE || state == ADDR_PREFERRED) {
      PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
      PRINTF("\n");
      /* hack to make address "final" */
      if (state == ADDR_TENTATIVE) {
        uip_ds6_if.addr_list[i].state = ADDR_PREFERRED;
      }
    }
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_server_process, ev, data)
{
  uip_ipaddr_t ipaddr;
  struct uip_ds6_addr *root_if;
  static struct etimer status_timer;
  static struct etimer debug_timer;
  

  PROCESS_BEGIN();

  PROCESS_PAUSE();

  SENSORS_ACTIVATE(button_sensor);

  PRINTF("UDP server started\n");

#if UIP_CONF_ROUTER
  {
    watchdog_periodic();

  uip_ip6addr(&ipaddr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0, 0, 0, 1);
  /* uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr); */
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
  root_if = uip_ds6_addr_lookup(&ipaddr);
  if(root_if != NULL) {
    rpl_dag_t *dag;
    dag = rpl_set_root(RPL_DEFAULT_INSTANCE,(uip_ip6addr_t *)&ipaddr);
    uip_ip6addr(&ipaddr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0, 0, 0, 0);
    rpl_set_prefix(dag, &ipaddr, 64);
    PRINTF("created a new RPL dag\n");
  } else {
    PRINTF("failed to create a new RPL DAG\n");
  }
#endif /* UIP_CONF_ROUTER */

  print_local_addresses();

  /* The data sink runs with a 100% duty cycle in order to ensure high
     packet reception rates. */
  NETSTACK_RDC.off(1);

  //server_conn = udp_new(NULL, UIP_HTONS(UDP_CLIENT_PORT), NULL);
    server_conn = udp_new(NULL, 0, NULL);
    server_conn->process = PROCESS_CURRENT();
    if(server_conn == NULL) {
    PRINTF("UDP connection allocation failed\n");
    PROCESS_EXIT();
  }
  udp_bind(server_conn, UIP_HTONS(UDP_SERVER_PORT));

  
  /* CRITICAL FIX: Attach connection to current process */
  udp_attach(server_conn, PROCESS_CURRENT());
  
  PRINTF("Listening on UDP port %u\n", UDP_SERVER_PORT);

  PRINTF("Created a server connection with remote address ");
  PRINT6ADDR(&server_conn->ripaddr);
  PRINTF(" local/remote port %u/%u\n", UIP_HTONS(server_conn->lport),
         UIP_HTONS(server_conn->rport));

  /* Set up periodic status reporting */
  etimer_set(&status_timer, CLOCK_SECOND * 30);

  } while(1) {
    PROCESS_YIELD();
    
    if(ev == tcpip_event) {
      printf("DEBUG: tcpip_event received\n");
      tcpip_handler();
    } else if(ev == sensors_event && data == &button_sensor) {
      printf("Button pressed: Initiating global repair\n");
      rpl_repair_root(RPL_DEFAULT_INSTANCE);
    } else if(etimer_expired(&status_timer)) {
      collect_common_net_print();
      etimer_reset(&status_timer);
    } else if(etimer_expired(&debug_timer)) {
      printf("DEBUG: Server alive, waiting for packets, conn=%p\n", server_conn);
      printf("DEBUG: UDP ports - local: %u, remote: %u\n", 
             UIP_HTONS(server_conn->lport), 
             UIP_HTONS(server_conn->rport));
      etimer_reset(&debug_timer);
    }
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
