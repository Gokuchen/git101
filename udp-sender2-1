/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

#include "contiki.h"
#include "net/ip/uip.h"
#include "net/ipv6/uip-ds6.h"
#include "net/ip/uip-udp-packet.h"
#include "net/rpl/rpl.h"
#include "dev/serial-line.h"
#if CONTIKI_TARGET_Z1
#include "dev/uart0.h"
#else
#include "dev/uart1.h"
#endif
#include "collect-common.h"
#include "collect-view.h"
#include "lib/random.h"

#include <stdio.h>
#include <string.h>

#define UDP_CLIENT_PORT 8775
#define UDP_SERVER_PORT 5688
#define SEND_INTERVAL (10 * CLOCK_SECOND)
#define PRINT_INTERVAL (60 * CLOCK_SECOND)

#define DEBUG DEBUG_PRINT
#include "net/ip/uip-debug.h"

static struct uip_udp_conn *client_conn;
static uip_ipaddr_t server_ipaddr;

/*---------------------------------------------------------------------------*/
PROCESS(udp_client_process, "UDP client process");
AUTOSTART_PROCESSES(&udp_client_process, &collect_common_process);

/*---------------------------------------------------------------------------*/
void
collect_common_set_sink(void)
{
  /* A udp client can never become sink */
}

/*---------------------------------------------------------------------------*/
void
collect_common_net_print(void)
{
  rpl_dag_t *dag;
  uip_ds6_route_t *r;
  uip_ds6_defrt_t *defrt;
  uip_ds6_nbr_t *nbr;
  int route_count = 0;

  /* Let's suppose we have only one instance */
  dag = rpl_get_any_dag();
  if(dag != NULL && dag->preferred_parent != NULL) {
    PRINTF("Preferred parent: ");
    PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
    PRINTF("\n");
    PRINTF("DAG rank: %u\n", dag->rank);
    PRINTF("DAG instance ID: %u\n", dag->instance->instance_id);
    PRINTF("MOP: %u\n", dag->instance->mop);
  } else {
    PRINTF("No DAG found or no preferred parent\n");
  }
  
  PRINTF("Routes:\n");
  
  /* Display default routes */
  defrt = uip_ds6_defrt_head();
  while(defrt != NULL) {
    PRINTF("Default via ");
    PRINT6ADDR(&defrt->ipaddr);
    PRINTF("\n");
    route_count++;
    defrt = list_item_next(defrt);
  }
  
  /* Display specific routes */
  for(r = uip_ds6_route_head(); r != NULL; r = uip_ds6_route_next(r)) {
    PRINT6ADDR(&r->ipaddr);
    PRINTF("/%u via ", r->length);
    if(uip_ds6_route_nexthop(r) != NULL) {
      PRINT6ADDR(uip_ds6_route_nexthop(r));
    } else {
      PRINTF("(direct)");
    }
    PRINTF("\n");
    route_count++;
  }
  
  /* Display neighbors */
  PRINTF("Neighbors:\n");
  for(nbr = nbr_table_head(ds6_neighbors); 
      nbr != NULL; 
      nbr = nbr_table_next(ds6_neighbors, nbr)) {
    PRINT6ADDR(&nbr->ipaddr);
    PRINTF(" (reachable: %u)\n", 
           (nbr_table_get_lladdr(ds6_neighbors, nbr) != NULL));
  }
  
  PRINTF("Total routes: %d\n", route_count);
  PRINTF("---\n");
}

/*---------------------------------------------------------------------------*/
static void
tcpip_handler(void)
{
  /* Process incoming packets but don't forward at application layer */
  if(uip_newdata()) {
    PRINTF("Received packet, letting RPL handle forwarding\n");
  }
}

/*---------------------------------------------------------------------------*/
void
collect_common_send(void)
{
  static uint8_t seqno;
  struct {
    uint8_t seqno;
    uint8_t for_alignment;
    struct collect_view_data_msg msg;
  } msg;
  uint16_t parent_etx;
  uint16_t rtmetric;
  uint16_t num_neighbors;
  uint16_t beacon_interval;
  rpl_parent_t *preferred_parent;
  linkaddr_t parent;
  rpl_dag_t *dag;
  

  if(client_conn == NULL) {
    PRINTF("Client connection not established\n");
    return;
  }

  memset(&msg, 0, sizeof(msg));
  seqno++;
  if(seqno == 0) {
    seqno = 128;
  }
  msg.seqno = seqno;


  linkaddr_copy(&parent, &linkaddr_null);
  parent_etx = 0;

  dag = rpl_get_any_dag();
  if(dag != NULL) {
    preferred_parent = dag->preferred_parent;
    if(preferred_parent != NULL) {
      uip_ds6_nbr_t *nbr;
      nbr = uip_ds6_nbr_lookup(rpl_get_parent_ipaddr(preferred_parent));
      if(nbr != NULL) {
        parent.u8[0] = nbr->ipaddr.u8[15];
        parent.u8[1] = nbr->ipaddr.u8[14];
        parent_etx = rpl_get_parent_rank((uip_lladdr_t *) uip_ds6_nbr_get_ll(nbr)) / 2;
      }
    }
    rtmetric = dag->rank;
    beacon_interval = (uint16_t) ((2L << dag->instance->dio_intcurrent) / 1000);
    num_neighbors = uip_ds6_nbr_num();
    
    PRINTF("Sending to sink: seq=%u, parent_etx=%u, rtmetric=%u, neighbors=%u\n",
           seqno, parent_etx, rtmetric, num_neighbors);
  } else {
    rtmetric = 0;
    beacon_interval = 0;
    num_neighbors = 0;
    PRINTF("No DAG available, sending with default values\n");
  }

  /* Store our node ID in the sender_id field for multi-hop identification */
  collect_view_construct_message(&msg.msg, &parent,
                                 parent_etx, rtmetric,
                                 num_neighbors, beacon_interval);
  
  

  /* Send packet to sink using RPL routing */
  uip_udp_packet_sendto(client_conn, &msg, sizeof(msg),
                        &server_ipaddr, UIP_HTONS(UDP_SERVER_PORT));
  
  PRINTF("Packet sent: size=%u bytes\n", sizeof(msg));
}

/*---------------------------------------------------------------------------*/
void
collect_common_net_init(void)
{
#if CONTIKI_TARGET_Z1
  uart0_set_input(serial_line_input_byte);
#else
  uart1_set_input(serial_line_input_byte);
#endif
  serial_line_init();
}

/*---------------------------------------------------------------------------*/
static void
print_local_addresses(void)
{
  int i;
  uint8_t state;

  PRINTF("Client IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(uip_ds6_if.addr_list[i].isused &&
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
      PRINTF("\n");
      if (state == ADDR_TENTATIVE) {
        uip_ds6_if.addr_list[i].state = ADDR_PREFERRED;
      }
    }
  }
}

/*---------------------------------------------------------------------------*/
static void
set_global_address(void)
{
  uip_ipaddr_t ipaddr;

  uip_ip6addr(&ipaddr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0, 0, 0, 0);
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);

  /* Set server address to sink */
  uip_ip6addr(&server_ipaddr, UIP_DS6_DEFAULT_PREFIX, 0, 0, 0, 0, 0, 0, 1);
  
  PRINTF("Server address set to: ");
  PRINT6ADDR(&server_ipaddr);
  PRINTF("\n");
}

/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_client_process, ev, data)
{
  static struct etimer periodic;
  static struct etimer send_timer;
  
  PROCESS_BEGIN();

  PROCESS_PAUSE();

  set_global_address();
  PRINTF("UDP client process started\n");

  print_local_addresses();

  /* Create direct connection to sink using RPL routing */
  client_conn = udp_new(&server_ipaddr, UIP_HTONS(UDP_SERVER_PORT), NULL);
  if(client_conn == NULL) {
    PRINTF("No UDP connection available, exiting!\n");
    PROCESS_EXIT();
  }
  udp_bind(client_conn, UIP_HTONS(UDP_CLIENT_PORT));

  PRINTF("Created UDP connection for RPL routing\n");

  etimer_set(&periodic, PRINT_INTERVAL);
  etimer_set(&send_timer, SEND_INTERVAL + (random_rand() % (SEND_INTERVAL/2)));

  while(1) {
    PROCESS_YIELD();
      if(ev == tcpip_event) {
      tcpip_handler();
      PRINTF("Run tcpip_handler");
    }
    
    if(etimer_expired(&send_timer)) {
      collect_common_send();
      etimer_restart(&send_timer);
    }
    
    if(etimer_expired(&periodic)) {
      collect_common_net_print();
      etimer_restart(&periodic);
    }
  }

  PROCESS_END();
}
